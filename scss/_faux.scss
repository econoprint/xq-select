@import "variables";
@import "mixins";

// Container used for styling the custom select, the button class below adds the bg gradient, corners, etc.
.xq-select-wrapper {
  position:         relative;
  display:          flex;
  flex-wrap:        nowrap;
  padding:          0;
  border:           1px solid $custom-select-border-color;
  background-color: $custom-select-bg;
  &:hover {
    border-color: darken($custom-select-border-color, 10%);
  }
  > select {
    // Make sure the select is behind the faux select
    position: relative;
    z-index:  $native-select-zindex;
  }
  // Contextual Borders
  .has-required & {
    border-color: $brand-required;
    &:hover {
      border-color: darken($brand-required, 10%);
    }
  }
  .has-error & {
    border-color: $brand-danger;
    &:hover {
      border-color: darken($brand-danger, 10%);
    }
  }
  .has-warning & {
    border-color: $brand-warning;
    &:hover {
      border-color: darken($brand-warning, 10%);
    }
  }
  .has-success & {
    border-color: $brand-success;
    &:hover {
      border-color: darken($brand-success, 10%);
    }
  }
}

@if $enable-fallback {
  .xq-select-wrapper {
    display: block;
  }
}

.xq-select-wrapper::after {
  $content: caret-down;
  @include xq-select-icons($icon-set, $content);
  background-color: transparent;
  border-left: 1px solid $custom-select-border-color;
  position: absolute;
  top: -1px;
  right: -1px;
  bottom: 0;
  padding: $padding-xs-vertical $padding-xs-horizontal;
  z-index: $zindex-select-arrow;
  // This hack make the select behind the arrow clickable in some browsers
  pointer-events:none;
  // Contextual Borders
  .has-required & {
    border-left-color: $brand-required;
  }
  .has-error & {
    border-left-color: $brand-danger;
    color: $brand-danger;
  }
  .has-warning & {
    border-left-color: $brand-warning;
    color: $brand-warning;
  }
  .has-success & {
    border-left-color: $brand-success;
    color: $brand-success;
  }
}

.xq-select-wrapper button {
  // The clickable, semi-invisible button for opening dropdown
  position:   absolute;
  top:        0;
  left:       0;
  bottom:     0;
  right:      0;
  width:      100%;
  background: $custom-select-bg;
  opacity:    0.0;
  z-index:    $zindex-select-button;
}

@if $enable-baseline {
  .xq-select-wrapper button {
    -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
  }
}

// Formatting for Faux Selects
.xq-select-dropdown {
  background-color: $custom-select-bg;
  color:            $custom-select-color;
  border-color:  $custom-select-focus-border-color;
  // Occupy same space as select, plus wrapper borders.
  min-width:     100% !important;
  position:      absolute;
  left:          -1px;
  right:         -1px;
  // Don't grow so big as to overlap important things
  max-height:    $dropdown-max-height;
  // Scroll properly if too big
  overflow-y:    auto;
  overflow-x:    hidden;
  text-overflow: ellipsis;
  white-space:   nowrap;
  // Stay above other items
  z-index:       $custom-select-zindex;
  & > li > a {
    cursor: pointer;
    & span {
      color: $text-muted;
      margin-left: 10px;
      text-shadow: none;
    }
  }
  // optgroup display
  .optgroup {
    color: darken($custom-select-color, 15%);
    font-weight: normal;
    text-shadow: none;
    padding: 6px 20px 3px 20px;
    border-top: 1px solid $gray-light !important;
  }
  .xq-select-item {
    &.focus {
      outline: none;
    }
    &.selected:before {
      $content: selected;
      @include xq-select-icons($icon-set, $content);
      background-color: transparent;
      position: relative;
      margin-left: -15px;
      margin-right: 5px;
    }
    &.disabled {
      color: $gray-light;
      cursor: $cursor-disabled;
    }
  }
}